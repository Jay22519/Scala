/***Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated 
with n items respectively. Also given an integer W which represents knapsack capacity, 
find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. 
You cannot break an item, either pick the complete item or donâ€™t pick it (0-1 property) . *****/

object MyClass {

    val value : List[Int] = List(60, 100, 120) ; 
    val wt : List[Int] = List(10, 20, 30) ; 
    val w:Int = 50 ; 
    val n:Int = 3 ; 
    
    
  def knapsack(w: Int,wt:List[Int],value :List[Int] ,n:Int) : Int= {
  
  if(n == 0 || w == 0)  0 
  
  else if (wt(n - 1) > w) return knapsack(w,wt,value, n - 1)
  
  else  (value(n-1) + knapsack(w- wt(n-1), wt, value, n-1)).max(knapsack(w, wt, value, n-1)) ; 
  
}
    def main(args: Array[String]) {
        print(knapsack(w,wt,value,n)) ; 
        
    }
}
